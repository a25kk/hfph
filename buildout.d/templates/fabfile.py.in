import getpass
from fabric.api import task
from fabric.api import cd
from fabric.api import env
from fabric.api import run
from fabric.api import roles
from fabric.api import settings

from ade25.fabfiles import server
from ade25.fabfiles import project

from ade25.fabfiles.server import controls

from slacker import Slacker
slack = Slacker('${settings:slack-api-token}')

env.use_ssh_config = True
env.forward_agent = True
env.port = '22'
env.user = 'root'
env.hosts = ['${fabric:host}']
env.webserver = '${fabric:directory}'
env.code_root = '${fabric:directory}'
env.local_root = '${buildout:directory}'
env.sitename = 'hph'
env.code_user = 'root'
env.prod_user = 'www'
env.actor = ${settings:username}


env.roledefs = {
    'production': ['hph'],
    'staging': ['z3']
}

@task
def staging():
    """ Execute task on staging environment """
    env.hosts = ['${fabric:host_staging}']

@task
def production():
    """ Execute task on production environment """
    env.hosts = ['${fabric:host_production}']

@task
def develop():
    """ Restart all """
    with cd(env.code_root):
        run('nice bin/develop up')


@task
def restart():
    """ Restart all """
    project.cluster.restart_clients()


@task
def restart_all():
    """ Restart all """
    with cd(env.webserver):
        run('nice bin/supervisorctl restart all')


@task
def restart_nginx():
    """ Restart Nginx """
    controls.restart_nginx()


@task
def restart_varnish():
    """ Restart Varnish """
    controls.restart_varnish()


@task
def restart_haproxy():
    """ Restart HAProxy """
    controls.restart_haproxy()


@task
def ctl(*cmd):
    """Runs an arbitrary supervisorctl command."""
    with cd(env.code_root):
        run('nice bin/supervisorctl ' + ' '.join(cmd))


@task
def deploy(actor=None):
    """ Deploy current master to production server """
    opts = dict(
        sitename=env.get('sitename'),
        actor=actor or env.get('actor') or getpass.getuser(),
    )
    controls.update()
    controls.build()
    project.cluster.restart_clients()
    msg = '[hph] *%(sitename)s* deployed by %(actor)s' % opts
    user = 'fabric'
    icon = ':shipit:'
    slack.chat.post_message('#general', msg, username=user, icon_emoji=icon)


@task
def deploy_full():
    """ Deploy current master to production and run buildout """
    project.site.update()
    project.site.build()
    project.cluster.restart_clients()


@task
def rebuild():
    """ Deploy current master and run full buildout """
    with settings(port=22):
        project.site.update()
        project.site.build_full()
        project.site.restart()


@task
def get_backup():
    """ Copy zipbackup for local development """
    run('ethtool -K eth0 tx off rx off')
    project.db.download_backup()


@task
def get_data():
    """ Copy live database for local development """
    project.db.download()


@task
def server_status():
    """ Show server load and disk status """
    server.status.status()
