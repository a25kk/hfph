# This is the default nginx configuration for the front-most web server,
# typically running on port 80 (HTTP) and 443 (HTTPS).

# It is mainly responsible for proxying to the Varnish cache.

# Process control

pid ${buildout:directory}/var/nginx.pid;
lock_file ${buildout:directory}/var/nginx.lock;

user ${users:nginx};

worker_processes 2;
daemon off;

worker_rlimit_nofile 8192;

# This is limited related to the number of file descriptors available

events {
    worker_connections ${limits:open-files};
}

# Logging

error_log ${buildout:directory}/var/log/nginx-error.log warn;

# HTTP server

http {

    include    ${buildout:directory}/etc/mime.types;
    default_type application/octet-stream;

    log_format  main    '$remote_addr - $remote_user [$time_local] "$request" '
                        '$status $body_bytes_sent "$http_referer" '
                        '"$http_user_agent" "$http_x_forwarded_for"';

    server_tokens       off;
    keepalive_requests 500;
    keepalive_timeout 300;
    types_hash_max_size 2048;

    server_names_hash_max_size 512;
    server_names_hash_bucket_size 128;

    sendfile        on;
    tcp_nopush      on;
    tcp_nodelay     off;

    gzip             on;
    gzip_min_length  256;
    gzip_proxied     any;
    gzip_http_version 1.0;
    gzip_comp_level 5;
    gzip_buffers 4 8k;
    gzip_types
        # text/html is always compressed by HttpGzipModule
        application/atom+xml
        application/javascript
        application/x-javascript
        application/json
        application/rss+xml
        application/vnd.ms-fontobject
        application/x-font-ttf
        application/x-web-app-manifest+json
        application/xhtml+xml
        application/xml
        font/opentype
        image/png
        image/gif
        image/jpeg
        image/svg+xml
        image/x-icon
        text/css
        text/plain
        text/xml
        text/x-component;
    gzip_disable "msie6";
    gzip_vary on;

    # Protect against the BEAST attack by preferring RC4-SHA when using SSLv3 and TLS protocols.
    # Note that TLSv1.1 and TLSv1.2 are immune to the beast attack but only work with OpenSSL v1.0.1 and higher and has limited client support.
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
    ssl_prefer_server_ciphers on;
    ssl_ciphers 'EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH';

    # Optimize SSL by caching session parameters for 10 minutes. This cuts down on the number of expensive SSL handshakes.
    # The handshake is the most CPU-intensive operation, and by default it is re-negotiated on every new/parallel connection.
    # By enabling a cache (of type "shared between all Nginx workers"), we tell the client to re-use the already negotiated state.
    # Further optimization can be achieved by raising keepalive_timeout, but that shouldn't be done unless you serve primarily HTTPS.
    ssl_session_cache    shared:SSL:10m; # a 1mb cache can hold about 4000 sessions, so we can hold 40000 sessions
    ssl_session_timeout  24h;

    ssl_ecdh_curve secp384r1; # Requires nginx >= 1.1.0

    ssl_buffer_size 1400; # 1400 bytes to fit in one MTU

    # Diffie-Hellman parameter for DHE ciphersuites, recommended 2048 bits
    ssl_dhparam ${buildout:directory}/etc/dhparam.pem;

    # This default SSL certificate will be served whenever the client lacks support for SNI (Server Name Indication).
    # Make it a symlink to the most important certificate you have, so that users of IE 8 and below on WinXP can see your main site without SSL errors.
    ssl_certificate      ${ssl:certificate};
    ssl_certificate_key  ${ssl:key};

    add_header X-Frame-Options SAMEORIGIN;
    # add_header Content-Security-Policy: default-src 'self'
    # add_header X-Content-Security-Policy "default-src 'self'; script-src 'self'; img-src 'self'";

    # OCSP stapling...
    ssl_stapling on;
    ssl_stapling_verify on;
    # ssl_trusted_certificate ${ssl:certificate};
    # resolver 8.8.8.8;
    resolver 8.8.8.8 8.8.4.4 valid=300s;
    resolver_timeout 5s;

    # Define Varnish upstream - we proxy to this below
    upstream cache {
        server ${hosts:nginx-backend}:${ports:nginx-backend};
    }

    # Allow big files
    client_max_body_size 128m;

    # HTTP server
    server {
        listen *:${ports:http} default;
        access_log ${buildout:directory}/var/log/main-access.log;
        root ${buildout:directory}/htdocs;
        index index.html index.htm;

        # Enable gzip compression of responses
        gzip             on;
        gzip_min_length  1000;

        # Show status information on /_nginx_status_
        location = /_nginx_status_ {
            stub_status on;
            allow 127.0.0.1;
            deny all;
        }

        error_page   502 503 504  /50x.html;
        location = /50x.html {
           internal;
        }

        location ~ /.well-known {
            root ${buildout:directory}/htdocs/;
        }

        # This is the 'panic' error message page. HAProxy will redirect here
        # if all nodes are down. Other parts of the stack may choose to
        # redirect to this URL as well.
        location ${urls:fallback} {
            break;
        }
        location ~* (^|/)\. {
            return 403;
        }

        # Prevent clients from accessing to backup/config/source files
        location ~* (\.(bak|config|sql|fla|psd|ini|log|sh|inc|swp|dist)|~)$ {
            return 403;
        }

    }

    server {
        listen *:${ports:http};
        server_name ${hosts:public} www.${hosts:public};
        return 301 https://www.${hosts:public}$request_uri;
    }
    server {
        listen *:${ports:http};
        server_name ${hosts:public1} www.${hosts:public1};
        return 301 https://www.${hosts:public}$request_uri;
    }

    # HTTPS server
    server {
        listen  *:${ports:https} ssl http2;
        server_name www.${hosts:public};
        access_log ${buildout:directory}/var/log/ssl-access.log;

        root ${buildout:directory}/src/hph.sitetheme/hph/sitetheme/resources/dist/;

        ssl on;
        ssl_certificate      ${ssl:certificate};
        ssl_certificate_key  ${ssl:key};
        ssl_verify_depth    3;

        location ~ /.well-known {
            root ${buildout:directory}/htdocs/;
        }

        location  ~ /manage(_.+)?$ {
            deny all;
        }

        # This is the 'panic' error message page. HAProxy will redirect here
        # if all nodes are down. Other parts of the stack may choose to
        # redirect to this URL as well.
        location ${urls:fallback} {
            root ${buildout:directory}/htdocs;
            break;
        }

        location /styleguide/ {
            root ${buildout:directory}/src/hph.sitetheme/hph/sitetheme/resources/dist/;
        }
        location ~ /sg- {
            root ${buildout:directory}/src/hph.sitetheme/hph/sitetheme/resources/dist/;
        }

        location /styles/ {
            root ${buildout:directory}/src/hph.sitetheme/hph/sitetheme/resources/dist/;
            try_files $uri @backend;
            expires max;
            access_log off;
            add_header Pragma public;
            add_header Cache-Control "public";
            proxy_buffering         on;
            proxy_cache_valid 200 120m;
        }
        location /scripts/ {
            root ${buildout:directory}/src/hph.sitetheme/hph/sitetheme/resources/dist/;
            try_files $uri @backend;
            expires max;
            access_log off;
            add_header Pragma public;
            add_header Cache-Control "public";
            proxy_buffering         on;
            proxy_cache_valid 200 120m;
        }
        location /assets/ {
            root ${buildout:directory}/src/hph.sitetheme/hph/sitetheme/resources/dist/;
            try_files $uri @backend;
            expires max;
            access_log off;
            add_header Pragma public;
            add_header Cache-Control "public";
            proxy_buffering         on;
            proxy_cache_valid 200 120m;
        }

        # Set expires max on static file types (make sure you are using cache busting filenames or query params):
        location ~* ^.+\.(css|js|jpg|jpeg|gif|png|ico|gz|svg|svgz|ttf|otf|woff|eot|mp4|ogg|ogv|webm|pdf)$ {
            try_files $uri @backend;
            expires max;
            access_log off;
            add_header Pragma public;
            add_header Cache-Control "public";
            proxy_buffering         on;
            proxy_cache_valid 200 120m;
        }
        location / {
            rewrite ^/(.*)$ /VirtualHostBase/https/www.${hosts:public}:${ports:https}/${sites:main}/VirtualHostRoot/$1 break;
            # Back end (for SSL content)
            proxy_pass http://cache;
            proxy_connect_timeout 75;
            proxy_read_timeout 185;
            proxy_set_header X-Real-IP  $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto https;
            proxy_set_header X-Forwarded-Port 443;
            proxy_set_header Host $host;
        }
        location @backend {
            rewrite ^/(.*)$ /VirtualHostBase/https/www.${hosts:public}:${ports:https}/${sites:main}/VirtualHostRoot/$1 break;
            # Back end (for SSL content)
            proxy_pass http://cache;
            proxy_connect_timeout 75;
            proxy_read_timeout 185;
            proxy_set_header X-Real-IP  $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto https;
            proxy_set_header X-Forwarded-Port 443;
            proxy_set_header Host $host;
        }
    }
}
