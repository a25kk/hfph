# This is the default nginx configuration for the front-most web server,
# typically running on port 80 (HTTP) and 443 (HTTPS).

# It is mainly responsible for proxying to the Varnish cache.

# Process control

pid ${buildout:directory}/var/nginx.pid;
lock_file ${buildout:directory}/var/nginx.lock;

user ${users:nginx};

worker_processes 2;
daemon off;

worker_rlimit_nofile 8192;

# This is limited related to the number of file descriptors available

events {
    worker_connections ${limits:open-files};
}

# Logging

error_log ${buildout:directory}/var/log/nginx-error.log warn;

# HTTP server

http {

    include    ${buildout:directory}/etc/mime.types;
    default_type application/octet-stream;

    log_format  main    '$remote_addr - $remote_user [$time_local] "$request" '
                        '$status $body_bytes_sent "$http_referer" '
                        '"$http_user_agent" "$http_x_forwarded_for"';

    server_tokens       off;
    keepalive_timeout   20;

    server_names_hash_max_size 512;
    server_names_hash_bucket_size 128;

    sendfile        on;
    tcp_nopush      on;
    tcp_nodelay     off;

    gzip             on;
    gzip_min_length  256;
    gzip_proxied     any;
    gzip_http_version 1.0;
    gzip_comp_level 5;
    gzip_buffers 4 8k;
    gzip_types
        # text/html is always compressed by HttpGzipModule
        application/atom+xml
        application/javascript
        application/json
        application/rss+xml
        application/vnd.ms-fontobject
        application/x-font-ttf
        application/x-web-app-manifest+json
        application/xhtml+xml
        application/xml
        font/opentype
        image/svg+xml
        image/x-icon
        text/css
        text/plain
        text/x-component;
    gzip_disable "msie6";
    gzip_vary on;

    # Protect against the BEAST attack by preferring RC4-SHA when using SSLv3 and TLS protocols.
    # Note that TLSv1.1 and TLSv1.2 are immune to the beast attack but only work with OpenSSL v1.0.1 and higher and has limited client support.
    ssl_protocols              SSLv3 TLSv1 TLSv1.1 TLSv1.2;
    ssl_ciphers                ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:ECDHE-RSA-RC4-SHA:ECDHE-ECDSA-RC4-SHA:AES128:AES256:RC4-SHA:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!3DES:!MD5:!PSK;
    ssl_prefer_server_ciphers  on;


    # Optimize SSL by caching session parameters for 10 minutes. This cuts down on the number of expensive SSL handshakes.
    # The handshake is the most CPU-intensive operation, and by default it is re-negotiated on every new/parallel connection.
    # By enabling a cache (of type "shared between all Nginx workers"), we tell the client to re-use the already negotiated state.
    # Further optimization can be achieved by raising keepalive_timeout, but that shouldn't be done unless you serve primarily HTTPS.
    ssl_session_cache    shared:SSL:10m; # a 1mb cache can hold about 4000 sessions, so we can hold 40000 sessions
    ssl_session_timeout  10m;

    # This default SSL certificate will be served whenever the client lacks support for SNI (Server Name Indication).
    # Make it a symlink to the most important certificate you have, so that users of IE 8 and below on WinXP can see your main site without SSL errors.
    #ssl_certificate      /etc/nginx/default_ssl.crt;
    #ssl_certificate_key  /etc/nginx/default_ssl.key;

    # add_header X-Frame-Options SAMEORIGIN;
    # add_header Content-Security-Policy: default-src 'self'
    # add_header X-Content-Security-Policy "default-src 'self'; script-src 'self'; img-src 'self'";


    # Define Varnish upstream - we proxy to this below
    upstream cache {
        server ${hosts:nginx-backend}:${ports:nginx-backend};
    }

    # Allow big files
    client_max_body_size 128m;

    # HTTP server
    server {
        listen *:${ports:http} default;
        access_log ${buildout:directory}/var/log/main-access.log;
        root ${buildout:directory}/htdocs;
        index index.html index.htm;

        # Show status information on /_nginx_status_
        location = /_nginx_status_ {
            stub_status on;
            allow 127.0.0.1;
            deny all;
        }

        error_page   502 503 504  /50x.html;
        location = /50x.html {
           internal;
        }

        # This is the 'panic' error message page. HAProxy will redirect here
        # if all nodes are down. Other parts of the stack may choose to
        # redirect to this URL as well.
        location ${urls:fallback} {
            break;
        }

    }

    server {
        listen *:${ports:http};
        server_name ${hosts:public};
        return 301 $scheme://www.${hosts:public}$request_uri;
    }
    server {
        listen *:${ports:http};
        server_name ${hosts:public1};
        return 301 $scheme://www.${hosts:public1}$request_uri;
    }

    # HTTP server
    server {
        listen *:${ports:http} deferred;
        server_name www.${hosts:public};
        access_log ${buildout:directory}/var/log/main-access.log;

        # Show status information on /_nginx_status_
        location = /_nginx_status_ {
            stub_status on;
            allow 127.0.0.1;
            deny all;
        }

        error_page   502 503 504  /50x.html;
        location = /50x.html {
           internal;
        }

        # This is the 'panic' error message page. HAProxy will redirect here
        # if all nodes are down. Other parts of the stack may choose to
        # redirect to this URL as well.
        location ${urls:fallback} {
            break;
        }

        location / {

            rewrite ^(.*)(/login_|/require_login|/failsafe_login_form)(.*) https://$server_name$1$2$3 redirect;
            if ($http_cookie ~* "__ac=([^;]+)(?:;|$)" ) {
                rewrite ^(.*) https://$host/$1 redirect;
            }
            # Content author users (authenticatd with the Plone login cookie)
            # are forced to SSL always
            #if ($http_cookie ~* "__ac") {
            #    rewrite ^/(.*)$ https://${hosts:private}:${ports:https}/$1 redirect;
            #}
            ## The content author login form requires SSL
            #rewrite ^(.*/login_form)$    https://www.${hosts:private}:${ports:https}$1 redirect;
            #rewrite ^(.*/signin-form)$   https://www.${hosts:private}:${ports:https}$1 redirect;
            #rewrite ^(.*/require_login)$ https://www.${hosts:private}:${ports:https}$1 redirect;

            # Other pages are served from http, using virtual hosting
            rewrite ^/(.*)$ /VirtualHostBase/http/www.${hosts:public}:${ports:http}/${sites:main}/VirtualHostRoot/$1 break;

            proxy_pass http://cache;

            proxy_set_header Host  $host;
            proxy_connect_timeout 75;
            proxy_read_timeout 185;

        }
    }

    server {
        listen *:${ports:http};
        server_name www.${hosts:public1};
        access_log ${buildout:directory}/var/log/main-access.log;

        # Show status information on /_nginx_status_
        location = /_nginx_status_ {
            stub_status on;
            allow 127.0.0.1;
            deny all;
        }

        error_page   502 503 504  /50x.html;
        location = /50x.html {
           internal;
        }

        # This is the 'panic' error message page. HAProxy will redirect here
        # if all nodes are down. Other parts of the stack may choose to
        # redirect to this URL as well.
        location ${urls:fallback} {
            break;
        }

        location / {
            rewrite ^/(.*)$ /VirtualHostBase/http/www.${hosts:public}:${ports:http}/${sites:main}/VirtualHostRoot/$1 break;

            proxy_pass http://cache;

            proxy_set_header Host  $host;
            proxy_connect_timeout 75;
            proxy_read_timeout 185;

        }
    }

    # HTTPS server
    server {
        listen  *:${ports:http};
        server_name ${hosts:cms};
        access_log ${buildout:directory}/var/log/main-access.log;

        #ssl on;
        #ssl_certificate      ${ssl:certificate};
        #ssl_certificate_key  ${ssl:key};

        keepalive_timeout    70;

        location / {

            # Admin users are always managed over SSL
            if ($http_cookie ~* "__ac" ) {
                rewrite ^/(.*)$ /VirtualHostBase/https/${hosts:cms}:${ports:https}/${sites:main}/VirtualHostRoot/$1 break;
            }

            # The content author login form requires SSL
            rewrite ^(.*/login_form)$    /VirtualHostBase/https/${hosts:cms}:${ports:https}/${sites:main}/VirtualHostRoot$1 break;
            rewrite ^(.*/require_login)$ /VirtualHostBase/https/${hosts:cms}:${ports:https}/${sites:main}/VirtualHostRoot$1 break;

            # Resources are allowed over SSL
            rewrite ^/(.*\.(css|kss|js|jpg|jpeg|gif|png))$ /VirtualHostBase/https/${hosts:cms}:${ports:https}/${sites:main}/VirtualHostRoot/$1 break;

            # Everything else is redirected back to http
            rewrite ^/(.*)$ http://${hosts:cms}:${ports:http}/$1 permanent;

            # Back end (for SSL content)
            rewrite ^/(.*)$ /VirtualHostBase/http/${hosts:cms}:${ports:http}/${sites:main}/VirtualHostRoot/$1 break;
            proxy_pass http://cache;

            proxy_set_header Host  $host;
            proxy_connect_timeout 75;
            proxy_read_timeout 185;
        }

    }
    server {
        listen  *:${ports:http};
        server_name ${hosts:demo};
        access_log ${buildout:directory}/var/log/main-access.log;

        location / {
            rewrite ^/(.*)$ /VirtualHostBase/http/${hosts:demo}:${ports:http}/${sites:main}/VirtualHostRoot/$1 break;
            proxy_pass http://cache;

            proxy_set_header Host  $host;
            proxy_connect_timeout 75;
            proxy_read_timeout 185;
        }

    }
    # HTTPS server
    server {
        listen  *:${ports:https} ssl spdy;
        server_name www.${hosts:public};
        access_log ${buildout:directory}/var/log/ssl-access.log;

        ssl on;
        ssl_certificate      ${ssl:certificate};
        ssl_certificate_key  ${ssl:key};
        ssl_verify_depth    3;

        location / {

            if ($http_cookie ~* "__ac=([^;]+)(?:;|$)" ) {
                # prevent infinite recursions between http and https
                break;
            }
            rewrite ^(.*)(/logged_out)(.*) http://$server_name$1$2$3 redirect;

            ## Admin users are always managed over SSL
            #if ($http_cookie ~* "__ac" ) {
            #    rewrite ^/(.*)$ /VirtualHostBase/https/www.${hosts:public}:${ports:https}/${sites:main}/VirtualHostRoot/$1 break;
            #}
            ## The content author login form requires SSL
            #rewrite ^(.*/login_form)$    /VirtualHostBase/https/www.${hosts:public}:${ports:https}/${sites:main}/VirtualHostRoot$1 break;
            #rewrite ^(.*/signin-form)$   /VirtualHostBase/https/www.${hosts:public}:${ports:https}/${sites:main}/VirtualHostRoot$1 break;
            #rewrite ^(.*/require_login)$ /VirtualHostBase/https/www.${hosts:public}:${ports:https}/${sites:main}/VirtualHostRoot$1 break;
            ## Resources are allowed over SSL
            #rewrite ^/(.*\.(css|kss|js|jpg|jpeg|gif|png))$ /VirtualHostBase/https/www.${hosts:public}:${ports:https}/${sites:main}/VirtualHostRoot/$1 break;
            # Everything else is redirected back to http
            rewrite ^/(.*)$ http://www.${hosts:public}:${ports:http}/$1 permanent;

            # Back end (for SSL content)
            proxy_pass http://cache;

            proxy_set_header Host  $host;
            proxy_connect_timeout 75;
            proxy_read_timeout 185;
        }

    }
}
