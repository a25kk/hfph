<?xml version="1.0" encoding="UTF-8"?>
<rules
    xmlns="http://namespaces.plone.org/diazo"
    xmlns:css="http://namespaces.plone.org/diazo/css"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">

    <!-- Template for navigation tree rewrites -->
    <xsl:template name="nav-tree">
        <div class="app-card app-card-nav app-nav-list">
            <div class="app-card-header app-card-header-nav-list">
                Navigation
            </div>
            <div class="app-card-main">
                <nav class="app-nav-tree">
                    <ul class="app-nav-tree-list app-nav-list app-nav-level-0">
                        <xsl:apply-templates select="./nav/*"/>
                    </ul>
                </nav>
            </div>
        </div>
    </xsl:template>
    <xsl:template name="nav-list-base">
        <ul class="app-nav-tree-list app-nav-list app-nav-level-0">
            <xsl:apply-templates />
        </ul>
    </xsl:template>
    <xsl:template name="nav-list">
        <ul class="app-nav-list">
            <xsl:if test="@class[contains(.,'navTreeLevel1')]">
                <xsl:attribute name="class">app-nav-tree-list app-nav-list app-nav-level-1</xsl:attribute>
            </xsl:if>
            <xsl:if test="@class[contains(.,'navTreeLevel2')]">
                <xsl:attribute name="class">app-nav-tree-list app-nav-list app-nav-level-2</xsl:attribute>
            </xsl:if>
            <xsl:apply-templates />
        </ul>
    </xsl:template>
    <xsl:template name="nav-tree-item">
        <li class="app-nav-list-item">
            <xsl:choose>
                <xsl:when css:test=".navTreeCurrentNode">
                    <xsl:attribute name="class">app-nav-list-item app-nav-list-item-active</xsl:attribute>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:attribute name="class">app-nav-list-item</xsl:attribute>
                </xsl:otherwise>
            </xsl:choose>
            <xsl:apply-templates />
        </li>
    </xsl:template>
    <xsl:template name="nav-tree-link">
        <a class="app-nav-list-link">
            <xsl:choose>
                <xsl:when css:test=".navTreeCurrentNode">
                    <xsl:attribute name="class">app-nav-list-link app-nav-list-link-active</xsl:attribute>
                </xsl:when>
                <xsl:when css:test=".navTreeItemInPath">
                    <xsl:attribute name="class">app-nav-list-link app-nav-list-link-open</xsl:attribute>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:attribute name="class">app-nav-list-link</xsl:attribute>
                </xsl:otherwise>
            </xsl:choose>
            <xsl:attribute name="href"><xsl:value-of select="@href" /></xsl:attribute>
            <xsl:copy-of select="./a/@*[local-name() != 'class']"/>
            <!--<xsl:attribute name="class"><xsl:value-of select="./@class" /> app-nav-list-link</xsl:attribute>-->
            <xsl:copy-of select="./text()" />
        </a>
    </xsl:template>

     <!-- Setup custom templates for specific site sections or views -->
    <theme href="dist/signin/index.html" css:if-content="body.template-login_form" />
    <theme href="dist/signin/index.html" css:if-content="body.template-logged_out" />
    <theme href="dist/signin/index.html" css:if-content="body.template-login_failed" />
    <theme href="dist/signin/index.html" css:if-content="body.template-mail_password_form" />
    <theme href="dist/signin/index.html" css:if-content="body.template-mail_password_response" />
    <theme href="dist/signin/index.html" css:if-content="body.template-pwreset_form" />
    <theme href="dist/signin/index.html" css:if-content="body.template-pwreset_finish" />
    <theme href="dist/signin/index.html" css:if-content="body.template-useraccount" />
    <theme href="dist/signin/index.html" css:if-content="body.template-useraccount-error" />
    <theme href="dist/signin/index.html" css:if-content="body.template-signin-form" />

    <theme href="dist/frontpage/index.html" css:if-content=".template-frontpage-view" />
    <!--<theme href="dist/frontpage/index.html" css:if-content="body.portaltype-hph-sitecontent-mainsection" />-->

    <!-- Project specific theme files -->
    <theme href="dist/theme-igp/index.html" css:if-content=".subsection-institute-gesellschaftspolitik" />
    <theme href="dist/theme-igp/index.html" css:if-content=".subsection-institute-globalefragen" />
    <!--<theme href="dist/pp/index.html" css:if-content="body.section-pro-philosophia" />-->
    <!-- Opac und newsletter templates -->
    <!--><theme href="dist/opac/index.html" css:if-content="body.subsection-bibliotheken-opac-recherche" />-->
    <theme href="dist/newsletter/index.html" css:if-content=".section-newsletter" />

    <!-- Rules applying to a standard web page -->
    <rules css:if-content="#visual-portal-wrapper">

        <notheme if="$ajax_load" />
        <theme href="dist/index.html" />

        <replace css:theme="title" css:content="title" />
        <after theme="/html/head/title" css:content="base" />
        <!-- Add meta tags -->
        <drop css:content="meta[name='viewport']" />
        <before content="/html/head/meta" theme="/html/head/title" />

        <after
            content="/html/head/link | /html/head/style | /html/head/script"
            theme-children="/html/head"
        />

       <rules css:if-content="body.userrole-authenticated">
           <!-- Drop style tags from theme template -->
            <drop theme="/html/head/style" />
        </rules>

        <drop theme="/html/body/script" />

        <!-- Custom favicon implementation -->
        <drop css:content="head link[rel='apple-touch-icon-precomposed']" />
        <drop css:content="head link[rel='apple-touch-icon']" />
        <drop css:content="head link[rel='shortcut icon']" />
        <!--<after theme="/html/head">
          <link href="https://fonts.googleapis.com/css?family=Open+Sans:300,400,400i,600" rel="stylesheet" />
          <link rel="apple-touch-icon" sizes="180x180" href="/++theme++hph.sitetheme/dist/assets/ico/apple-touch-icon.png" />
          <link rel="icon" type="image/png" href="/++theme++hph.sitetheme/dist/assets/ico/favicon-32x32.png" sizes="32x32" />
          <link rel="icon" type="image/png" href="/++theme++hph.sitetheme/dist/assets/ico/favicon-16x16.png" sizes="16x16" />
          <link rel="manifest" href="/++theme++hph.sitetheme/dist/assets/ico/manifest.json" />
          <link rel="mask-icon" href="/++theme++hph.sitetheme/dist/assets/ico/safari-pinned-tab.svg" color="#5bbad5" />
          <link rel="shortcut icon" href="/++theme++hph.sitetheme/dist/assets/ico/favicon.ico" />
          <meta name="msapplication-config" content="/++theme++hph.sitetheme/dist/assets/ico/browserconfig.xml" />
          <meta name="theme-color" content="#ffffff" />
        </after>-->

        <!-- Copy over the id/class attributes on the body tag.
             This is important for per-section styling -->
        <merge attributes="class" css:content="body" css:theme="body" />
        <copy attributes="*" css:content="body" css:theme="body" />

        <!-- CMSUI Editbar replacements -->
        <drop css:theme="#app-toolbar"
            css:if-content=".userrole-anonymous" />

         <!-- toolbar -->
        <replace css:theme="#app-toolbar"
            css:content="#edit-bar"
            css:if-not-content=".ajax_load"
            css:if-content=".userrole-authenticated"/>
        <!-- Logo (link target) -->
        <copy attributes="href" css:content="#portal-logo" css:theme="a.navbar-brand" />
        <copy attributes="href" css:content="#portal-logo" css:theme="a.app-brand" />
        <copy attributes="href" css:content="#portal-logo" css:theme=".app-brandname" />

        <drop css:if-content=".section-pro-philosophia"
              css:theme="#app-brandname-logo-main" />
        <drop css:if-not-content=".section-pro-philosophia"
              css:theme="#app-brandname-logo-pro-philosophia" />

        <!-- Portal searchbox -->
        <!--<copy attributes="*" css:content="#portal-searchbox form"
              css:theme="#app-searchbox" />

        <replace css:content="#portal-searchbox" css:theme="#app-searchbox" method="raw" />-->

        <!-- Global navigation -->
        <drop css:theme="#app-section-marker"
            css:if-not-content="#brandbar-sectionname" />
        <replace css:content-children="#brandbar-sectionname"
            css:theme-children="#app-section-marker" />

        <replace css:content-children="#portal-navigation-base"
            css:theme-children="#app-sections"
            css:if-not-content="body.template-frontpage-view" />

        <replace css:content-children="#portal-navigation"
            css:theme-children="#app-navbar-nav"
            css:if-content="body.template-frontpage-view" />

        <replace css:content-children="#portal-subnavigation"
            css:theme-children="#app-navbar-nav" />

        <drop css:theme="#app-header-content-subnavbar"
            css:if-not-content="#subsubsections" />
        <replace css:content-children="#portal-subsubnavigation"
            css:theme-children="#app-navbar-nav-sub" />

        <drop css:theme="#app-tickerbar"
            css:if-not-content="#app-tickerbar" />
        <replace css:theme="#app-tickerbar"
            css:content="#app-tickerbar"
            css:if-content="#app-tickerbar" />

        <after css:theme-children="#app-header"
               css:content="#app-tickerbar"
               css:if-content="#app-tickerbar" />

        <!-- Breadcrumbs -->
        <replace css:content="#portal-breadcrumbs" method="raw" if-content="//*[@id='breadcrumbs-1']">
            <ol class="breadcrumb">
                <xsl:for-each select="./div/ol/li[not(position() = last())]//a">
                    <li>
                        <xsl:apply-templates select="."/>
                    </li>
                </xsl:for-each>
                <li class="active">
                    <xsl:apply-templates select="./div/ol/li[position() = last()]/*"/>
                </li>
            </ol>
        </replace>
        <replace css:theme-children="#app-pathbar" css:content="#portal-breadcrumbs" />

        <!-- Login form rules -->
        <replace css:content-children="#content-core"
                 css:theme-children="#app-signin-body"
                 css:if-content="body.template-login_form" />
        <replace css:content-children="#content-core"
                 css:theme-children="#app-signin-content"
                 css:if-content="body.template-signin-form" />
        <replace css:content-children="#content-core"
                 css:theme-children="#app-signin-body"
                 css:if-content="body.template-login_failed" />
        <replace css:content-children="#content-core"
                 css:theme-children="#app-signin-content"
                 css:if-content="body.template-logged_out" />
        <replace css:content-children="#content-core"
                 css:theme-children="#app-signin-content"
                 css:if-content="body.template-mail_password_form" />
        <replace css:content-children="#content"
                 css:theme-children="#app-signin-content"
                 css:if-content="body.template-mail_password_response" />
        <replace css:content-children="#content"
                 css:theme-children="#app-signin-content"
                 css:if-content="body.template-pwreset_form" />
        <replace css:content-children="#content"
                 css:theme-children="#app-signin-content"
                 css:if-content="body.template-pwreset_finish" />
        <replace css:content-children="#content-core"
                 css:theme-children="#app-signin-content"
                 css:if-content="body.template-useraccount" />
        <replace css:content-children="#content-core"
                 css:theme-children="#app-signin-content"
                 css:if-content="body.template-useraccount-error" />


        <!-- Document First Heading -->
        <replace css:content=".documentFirstHeading">
            <div class="app-page-header">
                <h1 class="app-page-title">
                    <xsl:apply-templates />
                </h1>
            </div>
        </replace>
        <!-- Document lead description -->
        <replace css:content=".documentDescription">
            <p class="app-page-abstract">
                <xsl:apply-templates />
            </p>
        </replace>
        <!-- Add classes to content core -->
         <replace css:content="#content-core">
             <div class="app-page-content" id="content-core">
                 <xsl:apply-templates />
             </div>
         </replace>

        <!-- Cleanup unwanted inline styles -->
        <drop attributes="align style" css:content="p" />
        <drop attributes="align style" css:content="ul" />

        <!-- Document Content -->
        <!-- Frontpage exception -->
        <replace css:content="#app-section"
            css:theme-children="#content"
            css:if-content=".template-frontpage-view" />
        <replace css:content-children="#app-panel-news"
            css:theme-children="#app-panel-news"
            css:if-content=".template-frontpage-view" />

        <!-- Standard content area -->
        <rules css:if-not-content=".template-frontpage-view, .section-newsletter">
            <rules css:if-not-content="#portal-column-one">
                <drop css:theme="#app-page-aside" />
                <replace css:content-children="#content"
                         css:theme-children="#content"
                />
            </rules>
            <rules css:if-content="#portal-column-one">
                <before css:theme-children="#content" method="raw">
                    <xsl:attribute name="class">app-main-content app-main-content-gutter app-panel</xsl:attribute>
                </before>
                <replace css:content-children="#portal-column-one > *"
                         css:theme-children="#app-page-aside" />
                <replace css:content-children="#content"
                         css:theme-children="#app-page-main"
                />
            </rules>
        </rules>

        <!-- Fix table styles -->
        <replace css:content="table.listing">
          <table>
            <xsl:copy-of select="@*"/>
            <xsl:attribute name="class">table table-hover</xsl:attribute>
            <xsl:apply-templates />
          </table>
        </replace>

        <replace css:content="table.plain">
            <table>
                <xsl:copy-of select="@*"/>
                <xsl:attribute name="class">table</xsl:attribute>
                <xsl:apply-templates />
            </table>
        </replace>

        <!-- Event listing transforms -->
        <replace css:content="ul.mode_selector">
            <table>
                <xsl:copy-of select="@*"/>
                <xsl:attribute name="class">app-event-list-nav</xsl:attribute>
                <xsl:apply-templates />
            </table>
        </replace>

         <!-- Alert and portal messages -->
        <strip css:content=".portalMessage dd"/>
        <replace css:content=".portalMessage" >
          <xsl:choose>
              <xsl:when css:test=".portalMessage[style]"/>
              <xsl:when css:test=".portalMessage">
                  <div class="app-callout app-callout-default alert-dismissable" role="alert">
                      <xsl:choose>
                          <xsl:when css:test=".info">
                              <xsl:attribute name="class">app-callout app-callout-success alert-dismissable</xsl:attribute>
                          </xsl:when>
                          <xsl:when css:test=".error">
                              <xsl:attribute name="class">app-callout app-callout-danger alert-dismissable</xsl:attribute>
                          </xsl:when>
                          <xsl:when css:test=".warning">
                              <xsl:attribute name="class">app-callout app-callout-warning alert-dismissable</xsl:attribute>
                          </xsl:when>
                      </xsl:choose>
                      <h4><xsl:apply-templates select="./dt/*"/></h4>
                      <xsl:apply-templates />
                  </div>
              </xsl:when>
          </xsl:choose>
        </replace>


        <!-- Form transforms -->

        <replace css:content=".formHelp">
              <xsl:copy>
                <xsl:copy-of select="@*" />
                <xsl:attribute name="class"><xsl:value-of select="./@class" /> help-block</xsl:attribute>
                <xsl:apply-templates />
              </xsl:copy>
            </replace>

        <!-- Required marker -->
        <replace css:content="span.required">
          <xsl:copy>
            <xsl:copy-of select="@*" />
            <xsl:attribute name="class"><xsl:value-of select="./@class" /> text-warning</xsl:attribute>
            <xsl:apply-templates />
          </xsl:copy>
        </replace>

        <!--<replace content="//*[contains(@class, 'fieldRequired')]/@class">
          <xsl:attribute name="class"><xsl:value-of select="." /> text-warning</xsl:attribute>
        </replace>-->
        <!-- Drop .label class for twbs compatibility -->
        <drop content="//label/span[@class='label']/@class" />

        <replace css:content=".field">
          <xsl:copy>
            <xsl:copy-of select="@*" />
            <xsl:choose>
               <xsl:when css:test=".error">
                 <xsl:attribute name="class"><xsl:value-of select="./@class" /> form-group has-error</xsl:attribute>
               </xsl:when>
               <xsl:otherwise>
                 <xsl:attribute name="class"><xsl:value-of select="./@class" /> form-group</xsl:attribute>
               </xsl:otherwise>
            </xsl:choose>
            <xsl:if test="not(*[@class='widget']) and not(table)">
              <xsl:choose>
                  <xsl:when css:test="[type='xradio']">
                      <xsl:attribute name="class">form-control radio</xsl:attribute>
                  </xsl:when>
                  <xsl:when css:test="[type='xcheckbox']">
                      <xsl:attribute name="class">form-control checkbox</xsl:attribute>
                  </xsl:when>
              </xsl:choose>
            </xsl:if>
              <xsl:apply-templates />
          </xsl:copy>
        </replace>

        <!-- Replace input elements (submit buttons and checkboxes) -->
        <replace css:content="input">
            <xsl:choose>
                <xsl:when css:test="[type='submit'],[type='button']">
                    <button>
                        <xsl:copy-of select="@*" />
                        <xsl:choose>
                            <xsl:when css:test=".delete, .destructive, [value='Delete']">
                                <xsl:attribute name="class"><xsl:value-of select="./@class" /> btn btn-danger</xsl:attribute>
                            </xsl:when>
                            <xsl:when css:test=".searchButton, .context">
                                <xsl:attribute name="class"><xsl:value-of select="./@class" /> btn btn-primary</xsl:attribute>
                            </xsl:when>
                            <xsl:when css:test=".standalone, .submit, .submit-widget, [type='file']">
                                <xsl:attribute name="class"><xsl:value-of select="./@class" /> app-btn app-btn-default</xsl:attribute>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:attribute name="class"><xsl:value-of select="./@class" /> app-btn app-btn-default</xsl:attribute>
                            </xsl:otherwise>
                        </xsl:choose>
                        <xsl:value-of select="./@value"/>
                    </button>
                </xsl:when>
                <xsl:when css:test="[type='text'][name$='.title'],#title, textarea">
                    <xsl:copy>
                        <xsl:copy-of select="@*" />
                        <xsl:attribute name="class"><xsl:value-of select="./@class" /> form-control</xsl:attribute>
                        <xsl:apply-templates />
                    </xsl:copy>
                </xsl:when>
                <xsl:when css:test="[class='label checkboxType']">
                    <xsl:copy>
                        <xsl:copy-of select="@*" />
                        <xsl:attribute name="class">checkboxType</xsl:attribute>
                        <xsl:apply-templates />
                    </xsl:copy>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:copy-of select="."/>
                </xsl:otherwise>
            </xsl:choose>
        </replace>

        <!-- Navtree -->
        <!-- Uses card semantics throughout the template
            The different parts are restyled from included template partials
        -->

        <replace css:content=".portletNavigationTree" css:if-not-content=".template-overview-controlpanel">
            <xsl:call-template name="nav-tree" />
        </replace>
        <replace css:content=".navTreeLevel0">
            <xsl:call-template name="nav-list-base" />
        </replace>
        <replace css:content=".navTree:not(.navTreeLevel0)">
            <xsl:call-template name="nav-list" />
        </replace>
        <replace css:content=".navTreeItem">
            <xsl:call-template name="nav-tree-item" />
        </replace>
        <replace css:content=".navTreeItem > a">
            <xsl:call-template name="nav-tree-link" />
        </replace>
        <replace css:content=".xnavTree" method="raw">
            <xsl:copy>
                <xsl:copy-of select="@*" />
                <xsl:if test="@class[contains(.,'navTreeLevel0')]">
                    <xsl:attribute name="class">app-nav-tree-list app-nav-list app-nav-level-0</xsl:attribute>
                </xsl:if>
                <xsl:if test="@class[contains(.,'navTreeLevel1')]">
                    <xsl:attribute name="class">app-nav-tree-list app-nav-list app-nav-level-1</xsl:attribute>
                </xsl:if>
                <xsl:if test="@class[contains(.,'navTreeLevel2')]">
                    <xsl:attribute name="class">app-nav-tree-list app-nav-list app-nav-level-2</xsl:attribute>
                </xsl:if>
                <xsl:apply-templates />
            </xsl:copy>
        </replace>

        <!-- Portlets-->
        <replace css:content=".portletNavigationTree" css:if-content=".template-overview-controlpanel">
            <div class="app-card">
                <xsl:for-each css:select=".portlet > *">
                    <div>
                        <xsl:if test="@class[contains(.,'portletHeader')]">
                            <xsl:attribute name="class">app-card-header</xsl:attribute>
                        </xsl:if>
                        <xsl:if test="@class[contains(.,'portletContent')]">
                            <xsl:attribute name="class">app-card-main-plain</xsl:attribute>
                        </xsl:if>
                        <xsl:if test="@class[contains(.,'portletFooter')]">
                            <xsl:attribute name="class">app-card-footer</xsl:attribute>
                        </xsl:if>
                        <xsl:copy-of select="node()"/>
                    </div>
                </xsl:for-each>
            </div>
        </replace>

        <!-- Portlets-->
        <replace css:content=".portlet:not(.portletNavigationTree)">
            <div class="app-card">
                <xsl:for-each css:select=".portlet > *">
                    <div>
                        <xsl:if test="@class[contains(.,'portletHeader')]">
                            <xsl:attribute name="class">app-card-header</xsl:attribute>
                        </xsl:if>
                        <xsl:if test="@class[contains(.,'portletContent')]">
                            <xsl:attribute name="class">app-card-main</xsl:attribute>
                        </xsl:if>
                        <xsl:if test="@class[contains(.,'portletFooter')]">
                            <xsl:attribute name="class">app-card-footer</xsl:attribute>
                        </xsl:if>
                        <xsl:copy-of select="node()"/>
                    </div>
                </xsl:for-each>
            </div>
        </replace>

    </rules>

</rules>
