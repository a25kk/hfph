############################################
#
# Buildout Configuration File for ZEO Plone
# -----------------------------------------
# $LastChangedDate: 2009-02-16 19:50:27 -0800 (Mon, 16 Feb 2009) $ $LastChangedRevision: 25091 $
#
# After making changes in this configuration file,
# you should run bin/buildout to update the components.
# 
# ALWAYS back up all Plone/Zope data and components
# before changing configuration.
# 
# Running "bin/buildout" will update your installation,
# installing missing components as necessary.
# 
# Use "bin/buildout -n" to update all components,
# including Plone, to the newest available releases.
# Generally, you only want to do that as part
# of a planned migration.
#
# Tutorial instructions for using zc.buildout for
# configuration management are available at:
# http://plone.org/documentation/tutorial/buildout
# Full details at http://pypi.python.org/pypi/zc.buildout
#
############################################


[buildout]


############################################
# Plone Component Versions
# ------------------------
# This version of the Unified Installer has the components
# of Plone 3.2.1 preloaded so that it can install without
# an Internet connection.
# If you want to update, uncomment the "extends = http://..." below,
# edit it to point to the current version URL,
# comment out the "extends = versions.cfg" line
# and run bin/buildout -n
# while attached to the Internet.
#
# extends = http://dist.plone.org/release/3.2.1/versions.cfg
extends = versions.cfg
versions = versions


############################################
# Ports
# -----
# Specify the ports on which your Zope installation
# will listen.
# ZEO Server
zeo-address = 127.0.0.1:18100
# Zope client 1
client1-address = 17080
# Zope client 2
client2-address = 17081


############################################
# Eggs
# ----
# Add an indented line to the eggs section for any Python
# eggs or packages you wish to include.
#
eggs =
    Plone
    Products.Linguaplone
    Products.PloneFormGen
    Products.Ploneboard
    collective.plonetruegallery
    pisa


#
# Optional Functionality
# ----------------------
# Uncomment the indented lines to include these products.
# Documentation on all of them, along with many more products,
# is available at
# http://plone.org/products/
#
# Commonly used products:
# * LinguaPlone provides tools for building multi-lingual sites
# * Products.CacheSetup adds the "CacheFu" Plone speedup kit
# * PloneHelpCenter is a simple knowledge base
# * PloneFormGen provides through-the-web form building
#
#    Products.LinguaPlone
#    Products.CacheSetup
#    Products.PloneHelpCenter
#    Products.PloneFormGen
#
# Commonly used development tools:
# * Clouseau uses AJAX to provide a Python prompt inside Plone
# * DocFinderTab puts an object documentation inspector in the Zope Management Interface
# * Gloworm is a Firebug-like viewlet inspector and customizer
# * plone.reload allows you to refresh Python code and ZCML configuration
#   without restarting Zope. Note that to use plone.reload, you'll also
#   need to uncomment the "zcml" entry for it below.
#
#    Products.Clouseau
#    Products.DocFinderTab
#    Products.Gloworm
#    plone.reload


############################################
# ZCML Slugs
# ----------
# Some eggs need ZCML slugs to tell Zope to
# use them. Eggs with names beginning with "Products."
# usually don't need this.
zcml =
#    plone.reload
    collective.plonetruegallery

    
############################################
# Development Eggs
# ----------------
# You can use paster to create "development eggs" to
# develop new products/themes. Put these in the src/
# directory.
# You will also need to add the egg names in the
# eggs section above, and may also need to add them
# to the zcml section.
#
# Provide the *paths* to the eggs you are developing here:
develop =
#    src/my.package


############################################
# Debug Mode
# ----------
# Change debug-mode to "on" to run in development mode.
# 
debug-mode = off
# Add-on developers should turn deprecation warnings on
deprecation-warnings = off
# change verbose-security to "on" for useful security errors while developing
verbose-security = off


############################################
############################################
# Buildout instructions beyond this point are
# usually only changed by experienced developers.
#
# Beyond here there be dragons!


eggs-directory=/local/home/dialog/Plone-3.2.1r4/buildout-cache/eggs
download-cache=/local/home/dialog/Plone-3.2.1r4/buildout-cache/downloads
newest = false
parts =
    zope2
    productdistros
    zeoserver
    client1
    client2
    zopepy
    zopeskel
    precompile
    chown
    unifiedinstaller


# Add additional egg download sources here. dist.plone.org contains archives
# of Plone packages.
find-links =
    http://dist.plone.org
    http://download.zope.org/ppix/
    http://download.zope.org/distribution/
    http://effbot.org/downloads


# unzip all eggs for easier debugging
unzip = true

# let's share our Zope install
zope-directory = /local/home/dialog/Plone-3.2.1r4


# This section installs the components of Zope 2.
# Zope operating instances are created elsewhere.
# For options see http://pypi.python.org/pypi/plone.recipe.zope2install
[zope2]
recipe = plone.recipe.zope2install
# update zope by updating this URL:
url = http://www.zope.org/Products/Zope/2.10.7/Zope-2.10.7-final.tgz
# fake eggs are required to satisfy Zope dependencies while
# zope is not yet eggified.
fake-zope-eggs = true
additional-fake-eggs =
    ZConfig
    pytz


# Use this section to download additional old-style products.
# List any number of URLs for product tarballs under URLs (separate
# with whitespace, or break over several lines, with subsequent lines
# indented). If any archives contain several products inside a top-level
# directory, list the archive file name (i.e. the last part of the URL, 
# normally with a .tar.gz suffix or similar) under 'nested-packages'.
# If any archives extract to a product directory with a version suffix, list
# the archive name under 'version-suffix-packages'.
# For options see http://pypi.python.org/pypi/plone.recipe.distros
[productdistros]
recipe = plone.recipe.distros

urls =
   http://plone.org/products/cmfnotification/releases/2.1/cmfnotification-2-1-tar.gz

nested-packages =
version-suffix-packages = 


# Use this section to install and configure a Zope
# Enterprise Objects server.
# For options see http://pypi.python.org/pypi/plone.recipe.zope2zeoserver
[zeoserver]
recipe = plone.recipe.zope2zeoserver
zope2-location = ${zope2:location}
zeo-address = ${buildout:zeo-address}
# Put the log, pid and socket files in var/zeoserver
zeo-log     = ${buildout:directory}/var/zeoserver/zeoserver.log
pid-file    = ${buildout:directory}/var/zeoserver/zeoserver.pid
socket-name = ${buildout:directory}/var/zeoserver/zeo.zdsock


# Use this section to install and configure a Zope
# client instance.
# For options see http://pypi.python.org/pypi/plone.recipe.zope2instance
[client1]
recipe = plone.recipe.zope2instance
zope2-location = ${zope2:location}

###########LRZ
zeo-client = off
##########/LRZ

zeo-address = ${zeoserver:zeo-address}
# The line below sets only the initial password. It will not change an
# existing password.
user = admin:bmzWAWcQ
http-address = ${buildout:client1-address}
# change debug-mode to "on" to run in development mode
debug-mode = ${buildout:debug-mode}
# change verbose-security to "on" for detailed security
# errors while developing
verbose-security = ${buildout:verbose-security}
deprecation-warnings = ${buildout:deprecation-warnings}
# Put the log, pid, lock files in var/client1
event-log = ${buildout:directory}/var/client1/event.log
z2-log    = ${buildout:directory}/var/client1/Z2.log
pid-file  = ${buildout:directory}/var/client1/client1.pid
lock-file = ${buildout:directory}/var/client1/client1.lock


############LRZ
# Main Storage namens main
file-storage = filestorage/dialog.hfph.mwn.de.main.fs
zope-conf-additional = 
 # Main Storage database per Direktive file-storage weiter oben definiert
 #      <zodb_db dialog.hfph.mwn.de.main>
 #      mount-point /
 #      <filestorage>
 #              path /local/home/dialog/Plone-3.2.1r4/zeocluster/var/filestorage/dialog.hfph.mwn.de.main.fs
 #      </filestorage>
 #      </zodb_db>

 ## dialog.hfph.mwn.de Storage database
 <zodb_db dialog.hfph.mwn.de>
   mount-point /www.hfph.mwn.de:/dialog.hfph.mwn.de/www.hfph.mwn.de
    <filestorage>
       path /local/home/dialog/Plone-3.2.1r4/zeocluster/var/filestorage/www.hfph.mwn.de.fs
       quota  5500000000
   </filestorage>
 </zodb_db>

 ## medien ordner
 <zodb_db dialog.hfph.mwn.de.medien>
   mount-point /www.hfph.mwn.de/kl81101/dialog/medien
   container-class Products.ATContentTypes.content.folder.ATFolder
    <filestorage>
       path /local/home/dialog/Plone-3.2.1r4/zeocluster/var/filestorage/medien/www.hfph.mwn.de.medien.fs
       quota  20000000000
     </filestorage>
 </zodb_db>
##########/LRZ


# If you want Zope to know about any additional eggs, list them here.
# e.g. eggs = ${buildout:eggs} my.package
eggs =
    ${buildout:eggs}


# If you want to register ZCML slugs for any packages, list them here.
# e.g. zcml = my.package my.other.package
zcml = 
    ${buildout:zcml}

    
products =
    ${buildout:directory}/products
    ${productdistros:location}


# You may also control the environment variables for the instance.
environment-vars =
    PYTHON_EGG_CACHE ${buildout:directory}/var/.python-eggs


# client2 picks up nearly all its configuration
# from client1. If you need to create a new client
# stanza, you should be able to copy this (with a new part name),
# changing only the parts with "client2" in them.
# For options see http://pypi.python.org/pypi/collective.recipe.zope2cluster
[client2]
recipe = collective.recipe.zope2cluster
instance-clone = client1
# we only need to specify what's different from the clone instance.
http-address = ${buildout:client2-address}
# Put the log, pid, lock files in var/client2
event-log = ${buildout:directory}/var/client2/event.log
z2-log    = ${buildout:directory}/var/client2/Z2.log
pid-file  = ${buildout:directory}/var/client2/client1.pid
lock-file = ${buildout:directory}/var/client2/client1.lock


# installs a zopepy python interpreter that runs with your
# full Zope environment
[zopepy]
recipe = zc.recipe.egg
eggs = ${client1:eggs}
interpreter = zopepy
extra-paths = ${zeoserver:zope2-location}/lib/python
scripts = zopepy


# installs paster and Zopeskel
[zopeskel]
recipe = zc.recipe.egg
eggs =
    ${client1:eggs}
    PasteScript
    ZopeSkel


# compiles .py files in ./parts and ./products so that they don't
# need to be compiled by the daemon
# For options see http://pypi.python.org/pypi/plone.recipe.precompiler
[precompile]
recipe = plone.recipe.precompiler


# This recipe is used to set permissions -- and ownership for root mode installs
# For options see http://pypi.python.org/pypi/plone.recipe.command
[chown]
recipe = plone.recipe.command
command =chmod 600 .installed.cfg
    touch ${buildout:directory}/var/zeoserver/zeoserver.log
    chmod 700 ${buildout:directory}/var/filestorage
    chmod 700 ${buildout:directory}/var/zeoserver
    chmod 700 ${buildout:directory}/var/client?
update-command = ${chown:command}


# This recipe installs the plonectl script and a few other convenience
# items.
# For options see http://pypi.python.org/pypi/plone.recipe.unifiedinstaller
[unifiedinstaller]
recipe = plone.recipe.unifiedinstaller
user = ${client1:user}
primary-port = ${client1:http-address}
sudo-command = 
